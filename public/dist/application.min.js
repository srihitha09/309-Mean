"use strict";var ApplicationConfiguration=function(){var applicationModuleName="coursetutor",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("courses"),ApplicationConfiguration.registerModule("profiles"),ApplicationConfiguration.registerModule("users"),angular.module("comments").run(["Menus",function(Menus){}]),angular.module("comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listComments",{url:"/comments",templateUrl:"modules/comments/views/comments.client.view.html"}).state("createComment",{url:"/comments/create",templateUrl:"modules/comments/views/create-comment.client.view.html"}).state("viewComment",{url:"/comments/:commentId",templateUrl:"modules/comments/views/view-comment.client.view.html"}).state("editComment",{url:"/comments/:commentId/edit",templateUrl:"modules/comments/views/edit-comment.client.view.html"})}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$location","$window","Authentication","Comments",function($scope,$stateParams,$location,$window,Authentication,Comments){$scope.authentication=Authentication,$scope.currentPage=1,$scope.pageSize=10,$scope.offset=0,$scope.pageChanged=function(){$scope.offset=($scope.currentPage-1)*$scope.pageSize},$scope.create=function(){var comment=new Comments({author:$scope.authentication.user.username,body:this.body,course:$scope.course._id});comment.$save(function(response){$window.location.reload(),$scope.author=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(comment){if(comment){comment.$remove();for(var i in $scope.comments)$scope.comments[i]===comment&&$scope.comments.splice(i,1)}else $scope.comment.$remove(function(){$location.path("comments")})},$scope.update=function(){var comment=$scope.comment;comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.comments=Comments.query()},$scope.findOne=function(){$scope.comment=Comments.get({commentId:$stateParams.commentId})},$scope.commentSearch=function(product){$location.path("comments/"+product._id)},$scope.upvote=function(comment){var index=comment.downvoters.indexOf($scope.authentication.user.username);index!==-1&&comment.downvoters.splice(index,1),comment.upvotes++,comment.upvoters.push($scope.authentication.user.username),comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.downvote=function(comment){var index=comment.upvoters.indexOf($scope.authentication.user.username);index!==-1&&comment.upvoters.splice(index,1),comment.upvotes--,comment.downvoters.push($scope.authentication.user.username),comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("comments/:commentId",{commentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("courses").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Courses","courses","dropdown","/courses(/create)?"),Menus.addSubMenuItem("topbar","courses","List Courses","courses"),Menus.addSubMenuItem("topbar","courses","New Course","courses/create")}]),angular.module("courses").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCourses",{url:"/courses",templateUrl:"modules/courses/views/courses.client.view.html"}).state("createCourse",{url:"/courses/create",templateUrl:"modules/courses/views/create-course.client.view.html"}).state("viewCourse",{url:"/courses/:courseId",templateUrl:"modules/courses/views/view-course.client.view.html"}).state("editCourse",{url:"/courses/:courseId/edit",templateUrl:"modules/courses/views/edit-course.client.view.html"})}]),angular.module("courses").controller("CoursesController",["$scope","$stateParams","$location","Authentication","Courses",function($scope,$stateParams,$location,Authentication,Courses){$scope.authentication=Authentication,$scope.currentPage=1,$scope.pageSize=10,$scope.offset=0,$scope.pageChanged=function(){$scope.offset=($scope.currentPage-1)*$scope.pageSize},$scope.create=function(){var course=new Courses({name:this.name,description:this.description});course.$save(function(response){$location.path("courses/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(course){if(course){course.$remove();for(var i in $scope.courses)$scope.courses[i]===course&&$scope.courses.splice(i,1)}else $scope.course.$remove(function(){$location.path("courses")})},$scope.update=function(){var course=$scope.course;course.$update(function(){$location.path("courses/"+course._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.courses=Courses.query()},$scope.findOne=function(){$scope.course=Courses.get({courseId:$stateParams.courseId})},$scope.courseSearch=function(product){$location.path("courses/"+product._id)}}]),angular.module("courses").factory("Courses",["$resource",function($resource){return $resource("courses/:courseId",{courseId:"@_id"},{update:{method:"PUT"}})}]),angular.module("profiles").run(["Menus",function(Menus){}]),angular.module("profiles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProfiles",{url:"/profiles",templateUrl:"modules/profiles/views/profile.client.view.html"}).state("viewProfile",{url:"/profiles/:profileId",templateUrl:"modules/profiles/views/profile.client.view.html"}).state("editProfile",{url:"/profiles/:profileId/edit",templateUrl:"modules/profiles/views/edit-profile.client.view.html"}).state("profileFriends",{url:"/profiles/:profileId/friends",templateUrl:"modules/profiles/views/profileFriends.client.view.html"}).state("profileCourses",{url:"/profiles/:profileId/courses",templateUrl:"modules/profiles/views/profileCourses.client.view.html"})}]);var activeContactId,activeContactName;angular.module("profiles").controller("ProfilesController",["$scope","$stateParams","$location","$window","Authentication","Profiles",function($scope,$stateParams,$location,$window,Authentication,Profiles){function showElementAndHideOthers(element_id){$("article#content > :not("+element_id+")").hide(),$(element_id).show()}function refreshChatView(history){$("section.chat_message").remove();for(var $wrapper=$("section#chat_wrapper"),i=0;i<history.length;){var styleString="",imgFileName="";history[i].from===$scope.authentication.user.displayName?(styleString="text-align: right; flex-direction: row-reverse;",imgFileName="talk_green.png"):(styleString="text-align: left; flex-direction: row;",imgFileName="talk_blue.png");var $item=$("<section/>",{class:"chat_message",style:"display: flex; margin-left: 10px; background-color: #f6f9fb; "+styleString});$item.append($("<img/>",{src:"/modules/profiles/img/"+imgFileName,style:"width: 40px; height: 40px; margin: 10px;"}));var $item_content_wrap=$("<section/>");$item_content_wrap.append($("<p/>",{text:history[i].from,style:"font-size: 20px; margin: 15px 0 0 0;"})),$item_content_wrap.append($("<p/>",{text:history[i].timestamp,style:"font-size: 10px; margin: 0;"})),$item_content_wrap.append($("<p/>",{text:history[i].body,style:"margin: 0;"})),$item.append($item_content_wrap),$wrapper.append($item),i++}}function showChatWithContact(event){var fetchConversationUrl="/contact/getChatHistory?conv_id="+event.data.conv_id;activeContactId=event.data.user_id,activeContactName=event.data.user_name,console.log($scope),$.ajax({url:fetchConversationUrl,method:"GET",success:function(history){refreshChatView(history),showElementAndHideOthers("section#chat_wrapper")}})}$scope.authentication=Authentication,$scope.currentPage=1,$scope.pageSize=10,$scope.offset=0,$scope.pageChanged=function(){$scope.offset=($scope.currentPage-1)*$scope.pageSize},$scope.create=function(){var profile=new Profiles({username:$scope.authentication.user.username,firstName:$scope.authentication.user.firstName,lastName:$scope.authentication.user.lastName,displayName:$scope.authentication.user.displayName,email:$scope.authentication.user.email,school:$scope.authentication.user.school,program:$scope.authentication.user.program,userId:$scope.authentication.user._id});profile.$save(function(response){$scope.author=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(profile){if(profile){profile.$remove();for(var i in $scope.profiles)$scope.profiles[i]===profile&&$scope.profiles.splice(i,1)}else $scope.profile.$remove(function(){$location.path("profiles")})},$scope.update=function(){var profile=$scope.profile;profile.$update(function(){$location.path("profiles/"+profile._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.profiles=Profiles.query()},$scope.findOne=function(){$scope.profile=Profiles.get({profileId:$stateParams.profileId})},$scope.profileSearch=function(product){$location.path("profiles/"+product._id)},$scope.addCourse=function(profile,product){console.log(profile.courses),console.log(product.name),profile.courses.indexOf(product.name)!=-1?alert("This course is already in your list!"):profile.courses.push(product.name),profile.$update(function(){$location.path("profiles/"+profile._id+"/courses")},function(errorResponse){$scope.error=errorResponse.data.message,$scope.error="Unable to add course"})},$scope.addFriend=function(profile){profile.friends.push($scope.authentication.user.username),profile.$update(function(){$location.path("profiles/"+profile._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.showAbout=function(){showElementAndHideOthers("section#about")},$scope.sendMessage=function(){if("undefined"!=typeof $scope.input_message&&$scope.input_message.length>0){var messageUrl="/contact/sendMessage?my_id="+$scope.authentication.user._id+"&my_name="+$scope.authentication.user.displayName+"&contact_id="+$scope.profile.userId+"&contact_name="+$scope.profile.displayName+"&text="+$scope.input_message;$.ajax({url:messageUrl,method:"POST",success:function(){$("textarea.post_message_textarea").val("");var $alert_post_sending=$("p#alert_post_sending");$alert_post_sending.css("color","#326C32"),$alert_post_sending.html("Message sent!"),$alert_post_sending.show()}})}else{var $alert_post_sending=$("p#alert_post_sending");$alert_post_sending.css("color","#E32F35"),$alert_post_sending.html("Please type something before send?"),$alert_post_sending.show()}},$scope.showMessageBox=function(){$("textarea.post_message_textarea").val(""),$("p#alert_post_sending").hide(),showElementAndHideOthers("section#send_message_wrapper")},$scope.hideMessageBox=function(){$("textarea.post_message_textarea").val(""),$("p#alert_post_sending").hide(),showElementAndHideOthers("section#about")},$scope.showContacts=function(){var listUrl="/contact/listContacts?my_id="+$scope.authentication.user._id;$.ajax({url:listUrl,method:"GET",success:function(contactList){var $wrapper=$("section#contacts_wrapper");$wrapper.empty();for(var i=0;i<contactList.length;){var newMessageAlert="";contactList[i].has_new_message||(newMessageAlert="New message!");var $item=$("<section/>",{style:"display: flex; margin-left: 10px; background-color: #f6f9fb; cursor: pointer; text-align: left;"});$item.append($("<img/>",{src:"/modules/profiles/img/talk_blue.png",style:"width: 50px; height: 50px; margin: 10px;"}));var $item_info_wrap=$("<section/>");$item_info_wrap.append($("<p/>",{text:contactList[i].contact_name,style:"font-size: 20px; margin: 15px 0 0 0;"})),$item_info_wrap.append($("<p/>",{text:newMessageAlert,style:"margin: 0; color: red;"})),$item.append($item_info_wrap),$item.on("click",{conv_id:contactList[i].conversation_id,user_id:contactList[i].contact_id,user_name:contactList[i].contact_name},showChatWithContact),$wrapper.append($item),i++}}}),showElementAndHideOthers("section#contacts_wrapper")},$scope.sendMessageInChat=function(){if("undefined"!=typeof $scope.input_message&&$scope.input_message.length>0){var messageUrl="/contact/sendMessage?my_id="+$scope.authentication.user._id+"&my_name="+$scope.authentication.user.displayName+"&contact_id="+activeContactId+"&contact_name="+activeContactName+"&text="+$scope.input_message;console.log(messageUrl),$.ajax({url:messageUrl,method:"POST",success:function(history){$("textarea.post_message_textarea").val(""),refreshChatView(history)}})}}}]),angular.module("profiles").factory("Profiles",["$resource",function($resource){return $resource("profiles/:profileId",{profileId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/profile/:profileId",templateUrl:"modules/profile/views/profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("resources",{url:"/settings/resources",templateUrl:"modules/users/views/settings/resources.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.stateChanged=function(checkbox){$scope.authentication.user.checkboxModel.tutor===!0&&alert("test")},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","$window","Users","Authentication",function($scope,$http,$location,$window,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);console.log(user.courses),console.log($scope.course),user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0;$scope.user.courses="",console.log($scope.user.courses)},$scope.updateUserCourses=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users({courses:$scope.course});user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user.courses=""},function(response){$scope.error=response.data.message})}else $scope.submitted=!0,$scope.user.courses="";console.log($scope.course),console.log($scope.user.courses)},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);